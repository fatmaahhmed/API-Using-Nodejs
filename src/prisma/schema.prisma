// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}
model user {
  user_id                   Int        @id @default(autoincrement())
  username                  String     @unique
  name                      String
  email                     String     @unique
  password                  String
  token                     String     @default("")
  role                      String     @default("User")
  verificationCode          String     @default("")
  verification_code_expires DateTime   @default(now())
  verified                  Boolean    @default(false)
  brands                    brand[]
  categories                category[]
  orders                    order[]
  products                  product[]
  reviews                   review[]
  wishList                  wishList[]
}

model category {
  category_id     Int        @id @unique @default(autoincrement())
  category_name   String     @unique
  slug            String    @default("")
  user_id         Int
  parent_id       Int?
  parentCategory  category?  @relation("ParentRelation", fields: [parent_id], references: [category_id])
  childCategories category[] @relation("ParentRelation")
  Admin           user       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  products        product[]
}

model product {
  product_id      Int        @id @default(autoincrement())
  product_name    String     @unique
  slug            String    @default("")
  quantity        Int
  description     String
  price           Float
  brand_id        Int
  rating          Float
  reviews_count   Int
  is_best_seller  Boolean
  is_on_sale      Boolean
  sale_start_date DateTime
  sale_end_date   DateTime
  discount_price  Float
  category_id     Int?
  user_id         Int
  orders          order[]
  brand           brand      @relation(fields: [brand_id], references: [brand_id])
  user            user       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  category        category?  @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  reviews         review[]
  WishList        wishList[]
}

model order {
  order_id        Int      @id @default(autoincrement())
  user_id         Int
  product_id      Int
  quantity        Int
  time_to_deliver DateTime
  total_price     Float
  order_date      DateTime
  product         product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  user            user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model wishList {
  wishlist_id Int     @id @default(autoincrement())
  product_id  Int
  user_id     Int
  user        user    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  product     product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@unique([wishlist_id, product_id, user_id])
  @@index([product_id])
  @@index([user_id])
}

model review {
  review_id  Int      @id @default(autoincrement())
  product_id Int
  user_id    Int
  rating     Float    @default(0)
  created_at DateTime
  updated_at DateTime
  user       user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  product    product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model brand {
  brand_id   Int       @id @default(autoincrement())
  brand_name String    @default("")
  slug       String    @unique
  user_id    Int
  user       user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  products   product[]
}

